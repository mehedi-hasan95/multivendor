// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  user
  admin
  vendor
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  username        String
  displayUsername String?
  role            userRole   @default(user)
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  Products        Products[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Categories {
  id            String          @id @default(uuid())
  name          String
  slug          String
  color         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  SubCategories SubCategories[]
  Products      Products[]

  @@unique([slug])
  @@index([slug])
}

model SubCategories {
  id           String     @id @default(uuid())
  name         String
  slug         String
  categorySlug String
  categorys    Categories @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Products     Products[]

  @@unique([slug])
  @@index([slug])
}

model Products {
  id            String         @id @default(uuid())
  title         String
  price         Int
  basePrice     Int
  description   String
  sellerId      String
  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  categoryId    String
  category      Categories     @relation(fields: [categoryId], references: [slug], onDelete: Cascade)
  subCategoryId String
  subCategory   SubCategories  @relation(fields: [subCategoryId], references: [slug], onDelete: Cascade)
  stock         Int?
  sale          Int            @default(0)
  images        ProductImage[]
  hasDiscount   Boolean        @default(false)
  discount      Int?
  discountcode  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([id])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
